// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package apiv1

import (
	"reflect"

	"github.com/RussellLuo/kun/pkg/oas2"
)

var (
	base = `swagger: "2.0"
info:
  title: "OSTree Repository Management API"
  version: "1.0.0"
  description: "OSTree is used for managing ostree repositories.\nThis is the API documentation of OSTree.\n//"
  license:
    name: "MIT"
host: "example.com"
basePath: "/artifacts/ostree/api/v1"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
`

	paths = `
paths:
  /repository/mirror:
    post:
      description: "Mirror an ostree repository."
      operationId: "MirrorRepository"
      tags:
        - ostree
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/MirrorRepositoryRequestBody"
      %s
`
)

func getResponses(schema oas2.Schema) []oas2.OASResponses {
	return []oas2.OASResponses{
		oas2.GetOASResponses(schema, "MirrorRepository", 200, &MirrorRepositoryResponse{}),
	}
}

func getDefinitions(schema oas2.Schema) map[string]oas2.Definition {
	defs := make(map[string]oas2.Definition)

	oas2.AddDefinition(defs, "MirrorRepositoryRequestBody", reflect.ValueOf(&struct {
		Repository string                      `json:"repository"`
		Properties *OSTreeRepositoryProperties `json:"properties"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "MirrorRepository", 200, (&MirrorRepositoryResponse{}).Body())

	return defs
}

func OASv2APIDoc(schema oas2.Schema) string {
	resps := getResponses(schema)
	paths := oas2.GenPaths(resps, paths)

	defs := getDefinitions(schema)
	definitions := oas2.GenDefinitions(defs)

	return base + paths + definitions
}
