// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package apiv1

import (
	"context"

	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/validating/v3"
	"github.com/go-kit/kit/endpoint"
)

type MirrorRepositoryRequest struct {
	Repository string                      `json:"repository"`
	Properties *OSTreeRepositoryProperties `json:"properties"`
}

// ValidateMirrorRepositoryRequest creates a validator for MirrorRepositoryRequest.
func ValidateMirrorRepositoryRequest(newSchema func(*MirrorRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*MirrorRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type MirrorRepositoryResponse struct {
	Err error `json:"-"`
}

func (r *MirrorRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *MirrorRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfMirrorRepository creates the endpoint for s.MirrorRepository.
func MakeEndpointOfMirrorRepository(s OSTree) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*MirrorRepositoryRequest)
		err := s.MirrorRepository(
			ctx,
			req.Repository,
			req.Properties,
		)
		return &MirrorRepositoryResponse{
			Err: err,
		}, nil
	}
}
