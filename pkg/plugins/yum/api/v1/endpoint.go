// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package apiv1

import (
	"context"

	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/validating/v3"
	"github.com/go-kit/kit/endpoint"
)

type CreateRepositoryRequest struct {
	Repository string                `json:"repository"`
	Properties *RepositoryProperties `json:"properties"`
}

// ValidateCreateRepositoryRequest creates a validator for CreateRepositoryRequest.
func ValidateCreateRepositoryRequest(newSchema func(*CreateRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*CreateRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type CreateRepositoryResponse struct {
	Err error `json:"-"`
}

func (r *CreateRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *CreateRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfCreateRepository creates the endpoint for s.CreateRepository.
func MakeEndpointOfCreateRepository(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateRepositoryRequest)
		err := s.CreateRepository(
			ctx,
			req.Repository,
			req.Properties,
		)
		return &CreateRepositoryResponse{
			Err: err,
		}, nil
	}
}

type DeleteRepositoryRequest struct {
	Repository     string `json:"repository"`
	DeletePackages bool   `json:"delete_packages"`
}

// ValidateDeleteRepositoryRequest creates a validator for DeleteRepositoryRequest.
func ValidateDeleteRepositoryRequest(newSchema func(*DeleteRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteRepositoryResponse struct {
	Err error `json:"-"`
}

func (r *DeleteRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteRepository creates the endpoint for s.DeleteRepository.
func MakeEndpointOfDeleteRepository(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteRepositoryRequest)
		err := s.DeleteRepository(
			ctx,
			req.Repository,
			req.DeletePackages,
		)
		return &DeleteRepositoryResponse{
			Err: err,
		}, nil
	}
}

type GetRepositoryRequest struct {
	Repository string `json:"repository"`
}

// ValidateGetRepositoryRequest creates a validator for GetRepositoryRequest.
func ValidateGetRepositoryRequest(newSchema func(*GetRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetRepositoryResponse struct {
	Properties *RepositoryProperties `json:"properties"`
	Err        error                 `json:"-"`
}

func (r *GetRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfGetRepository creates the endpoint for s.GetRepository.
func MakeEndpointOfGetRepository(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetRepositoryRequest)
		properties, err := s.GetRepository(
			ctx,
			req.Repository,
		)
		return &GetRepositoryResponse{
			Properties: properties,
			Err:        err,
		}, nil
	}
}

type GetRepositoryPackageRequest struct {
	Repository string `json:"repository"`
	Id         string `json:"id"`
}

// ValidateGetRepositoryPackageRequest creates a validator for GetRepositoryPackageRequest.
func ValidateGetRepositoryPackageRequest(newSchema func(*GetRepositoryPackageRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetRepositoryPackageRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetRepositoryPackageResponse struct {
	RepositoryPackages *RepositoryPackage `json:"repository_packages"`
	Err                error              `json:"-"`
}

func (r *GetRepositoryPackageResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetRepositoryPackageResponse) Failed() error { return r.Err }

// MakeEndpointOfGetRepositoryPackage creates the endpoint for s.GetRepositoryPackage.
func MakeEndpointOfGetRepositoryPackage(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetRepositoryPackageRequest)
		repositoryPackages, err := s.GetRepositoryPackage(
			ctx,
			req.Repository,
			req.Id,
		)
		return &GetRepositoryPackageResponse{
			RepositoryPackages: repositoryPackages,
			Err:                err,
		}, nil
	}
}

type GetRepositoryPackageByTagRequest struct {
	Repository string `json:"repository"`
	Tag        string `json:"tag"`
}

// ValidateGetRepositoryPackageByTagRequest creates a validator for GetRepositoryPackageByTagRequest.
func ValidateGetRepositoryPackageByTagRequest(newSchema func(*GetRepositoryPackageByTagRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetRepositoryPackageByTagRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetRepositoryPackageByTagResponse struct {
	RepositoryPackages *RepositoryPackage `json:"repository_packages"`
	Err                error              `json:"-"`
}

func (r *GetRepositoryPackageByTagResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetRepositoryPackageByTagResponse) Failed() error { return r.Err }

// MakeEndpointOfGetRepositoryPackageByTag creates the endpoint for s.GetRepositoryPackageByTag.
func MakeEndpointOfGetRepositoryPackageByTag(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetRepositoryPackageByTagRequest)
		repositoryPackages, err := s.GetRepositoryPackageByTag(
			ctx,
			req.Repository,
			req.Tag,
		)
		return &GetRepositoryPackageByTagResponse{
			RepositoryPackages: repositoryPackages,
			Err:                err,
		}, nil
	}
}

type GetRepositorySyncStatusRequest struct {
	Repository string `json:"repository"`
}

// ValidateGetRepositorySyncStatusRequest creates a validator for GetRepositorySyncStatusRequest.
func ValidateGetRepositorySyncStatusRequest(newSchema func(*GetRepositorySyncStatusRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetRepositorySyncStatusRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetRepositorySyncStatusResponse struct {
	SyncStatus *SyncStatus `json:"sync_status"`
	Err        error       `json:"-"`
}

func (r *GetRepositorySyncStatusResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetRepositorySyncStatusResponse) Failed() error { return r.Err }

// MakeEndpointOfGetRepositorySyncStatus creates the endpoint for s.GetRepositorySyncStatus.
func MakeEndpointOfGetRepositorySyncStatus(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetRepositorySyncStatusRequest)
		syncStatus, err := s.GetRepositorySyncStatus(
			ctx,
			req.Repository,
		)
		return &GetRepositorySyncStatusResponse{
			SyncStatus: syncStatus,
			Err:        err,
		}, nil
	}
}

type ListRepositoryLogsRequest struct {
	Repository string `json:"repository"`
	Page       *Page  `json:"page"`
}

// ValidateListRepositoryLogsRequest creates a validator for ListRepositoryLogsRequest.
func ValidateListRepositoryLogsRequest(newSchema func(*ListRepositoryLogsRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ListRepositoryLogsRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ListRepositoryLogsResponse struct {
	Logs []RepositoryLog `json:"logs"`
	Err  error           `json:"-"`
}

func (r *ListRepositoryLogsResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *ListRepositoryLogsResponse) Failed() error { return r.Err }

// MakeEndpointOfListRepositoryLogs creates the endpoint for s.ListRepositoryLogs.
func MakeEndpointOfListRepositoryLogs(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ListRepositoryLogsRequest)
		logs, err := s.ListRepositoryLogs(
			ctx,
			req.Repository,
			req.Page,
		)
		return &ListRepositoryLogsResponse{
			Logs: logs,
			Err:  err,
		}, nil
	}
}

type ListRepositoryPackagesRequest struct {
	Repository string `json:"repository"`
	Page       *Page  `json:"page"`
}

// ValidateListRepositoryPackagesRequest creates a validator for ListRepositoryPackagesRequest.
func ValidateListRepositoryPackagesRequest(newSchema func(*ListRepositoryPackagesRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ListRepositoryPackagesRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ListRepositoryPackagesResponse struct {
	RepositoryPackages []*RepositoryPackage `json:"repository_packages"`
	Err                error                `json:"-"`
}

func (r *ListRepositoryPackagesResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *ListRepositoryPackagesResponse) Failed() error { return r.Err }

// MakeEndpointOfListRepositoryPackages creates the endpoint for s.ListRepositoryPackages.
func MakeEndpointOfListRepositoryPackages(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ListRepositoryPackagesRequest)
		repositoryPackages, err := s.ListRepositoryPackages(
			ctx,
			req.Repository,
			req.Page,
		)
		return &ListRepositoryPackagesResponse{
			RepositoryPackages: repositoryPackages,
			Err:                err,
		}, nil
	}
}

type RemoveRepositoryPackageRequest struct {
	Repository string `json:"repository"`
	Id         string `json:"id"`
}

// ValidateRemoveRepositoryPackageRequest creates a validator for RemoveRepositoryPackageRequest.
func ValidateRemoveRepositoryPackageRequest(newSchema func(*RemoveRepositoryPackageRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*RemoveRepositoryPackageRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type RemoveRepositoryPackageResponse struct {
	Err error `json:"-"`
}

func (r *RemoveRepositoryPackageResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *RemoveRepositoryPackageResponse) Failed() error { return r.Err }

// MakeEndpointOfRemoveRepositoryPackage creates the endpoint for s.RemoveRepositoryPackage.
func MakeEndpointOfRemoveRepositoryPackage(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*RemoveRepositoryPackageRequest)
		err := s.RemoveRepositoryPackage(
			ctx,
			req.Repository,
			req.Id,
		)
		return &RemoveRepositoryPackageResponse{
			Err: err,
		}, nil
	}
}

type RemoveRepositoryPackageByTagRequest struct {
	Repository string `json:"repository"`
	Tag        string `json:"tag"`
}

// ValidateRemoveRepositoryPackageByTagRequest creates a validator for RemoveRepositoryPackageByTagRequest.
func ValidateRemoveRepositoryPackageByTagRequest(newSchema func(*RemoveRepositoryPackageByTagRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*RemoveRepositoryPackageByTagRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type RemoveRepositoryPackageByTagResponse struct {
	Err error `json:"-"`
}

func (r *RemoveRepositoryPackageByTagResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *RemoveRepositoryPackageByTagResponse) Failed() error { return r.Err }

// MakeEndpointOfRemoveRepositoryPackageByTag creates the endpoint for s.RemoveRepositoryPackageByTag.
func MakeEndpointOfRemoveRepositoryPackageByTag(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*RemoveRepositoryPackageByTagRequest)
		err := s.RemoveRepositoryPackageByTag(
			ctx,
			req.Repository,
			req.Tag,
		)
		return &RemoveRepositoryPackageByTagResponse{
			Err: err,
		}, nil
	}
}

type SyncRepositoryRequest struct {
	Repository string `json:"repository"`
	Wait       bool   `json:"wait"`
}

// ValidateSyncRepositoryRequest creates a validator for SyncRepositoryRequest.
func ValidateSyncRepositoryRequest(newSchema func(*SyncRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*SyncRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type SyncRepositoryResponse struct {
	Err error `json:"-"`
}

func (r *SyncRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *SyncRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfSyncRepository creates the endpoint for s.SyncRepository.
func MakeEndpointOfSyncRepository(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*SyncRepositoryRequest)
		err := s.SyncRepository(
			ctx,
			req.Repository,
			req.Wait,
		)
		return &SyncRepositoryResponse{
			Err: err,
		}, nil
	}
}

type SyncRepositoryWithURLRequest struct {
	Repository string `json:"repository"`
	MirrorURL  string `json:"mirror_url"`
	Wait       bool   `json:"wait"`
}

// ValidateSyncRepositoryWithURLRequest creates a validator for SyncRepositoryWithURLRequest.
func ValidateSyncRepositoryWithURLRequest(newSchema func(*SyncRepositoryWithURLRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*SyncRepositoryWithURLRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type SyncRepositoryWithURLResponse struct {
	Err error `json:"-"`
}

func (r *SyncRepositoryWithURLResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *SyncRepositoryWithURLResponse) Failed() error { return r.Err }

// MakeEndpointOfSyncRepositoryWithURL creates the endpoint for s.SyncRepositoryWithURL.
func MakeEndpointOfSyncRepositoryWithURL(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*SyncRepositoryWithURLRequest)
		err := s.SyncRepositoryWithURL(
			ctx,
			req.Repository,
			req.MirrorURL,
			req.Wait,
		)
		return &SyncRepositoryWithURLResponse{
			Err: err,
		}, nil
	}
}

type UpdateRepositoryRequest struct {
	Repository string                `json:"repository"`
	Properties *RepositoryProperties `json:"properties"`
}

// ValidateUpdateRepositoryRequest creates a validator for UpdateRepositoryRequest.
func ValidateUpdateRepositoryRequest(newSchema func(*UpdateRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpdateRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpdateRepositoryResponse struct {
	Err error `json:"-"`
}

func (r *UpdateRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpdateRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfUpdateRepository creates the endpoint for s.UpdateRepository.
func MakeEndpointOfUpdateRepository(s YUM) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdateRepositoryRequest)
		err := s.UpdateRepository(
			ctx,
			req.Repository,
			req.Properties,
		)
		return &UpdateRepositoryResponse{
			Err: err,
		}, nil
	}
}
