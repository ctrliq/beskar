// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package apiv1

import (
	"context"

	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/validating/v3"
	"github.com/go-kit/kit/endpoint"
)

type DeleteRepositoryRequest struct {
	Repository string `json:"repository"`
	DeletePackages bool `json:"deletePackages"`
}

// ValidateDeleteRepositoryRequest creates a validator for DeleteRepositoryRequest.
func ValidateDeleteRepositoryRequest(newSchema func(*DeleteRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteRepositoryResponse struct {
	Err error `json:"-"`
}

func (r *DeleteRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteRepository creates the endpoint for s.DeleteRepository.
func MakeEndpointOfDeleteRepository(s Static) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteRepositoryRequest)
		err := s.DeleteRepository(
			ctx,
			req.Repository,
			req.DeletePackages,
		)
		return &DeleteRepositoryResponse{
			Err: err,
		}, nil
	}
}

type GetRepositoryFileByNameRequest struct {
	Repository string `json:"repository"`
	Name       string `json:"name"`
}

// ValidateGetRepositoryFileByNameRequest creates a validator for GetRepositoryFileByNameRequest.
func ValidateGetRepositoryFileByNameRequest(newSchema func(*GetRepositoryFileByNameRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetRepositoryFileByNameRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetRepositoryFileByNameResponse struct {
	RepositoryFile *RepositoryFile `json:"repository_file"`
	Err            error           `json:"-"`
}

func (r *GetRepositoryFileByNameResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetRepositoryFileByNameResponse) Failed() error { return r.Err }

// MakeEndpointOfGetRepositoryFileByName creates the endpoint for s.GetRepositoryFileByName.
func MakeEndpointOfGetRepositoryFileByName(s Static) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetRepositoryFileByNameRequest)
		repositoryFile, err := s.GetRepositoryFileByName(
			ctx,
			req.Repository,
			req.Name,
		)
		return &GetRepositoryFileByNameResponse{
			RepositoryFile: repositoryFile,
			Err:            err,
		}, nil
	}
}

type GetRepositoryFileByTagRequest struct {
	Repository string `json:"repository"`
	Tag        string `json:"tag"`
}

// ValidateGetRepositoryFileByTagRequest creates a validator for GetRepositoryFileByTagRequest.
func ValidateGetRepositoryFileByTagRequest(newSchema func(*GetRepositoryFileByTagRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetRepositoryFileByTagRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetRepositoryFileByTagResponse struct {
	RepositoryFile *RepositoryFile `json:"repository_file"`
	Err            error           `json:"-"`
}

func (r *GetRepositoryFileByTagResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetRepositoryFileByTagResponse) Failed() error { return r.Err }

// MakeEndpointOfGetRepositoryFileByTag creates the endpoint for s.GetRepositoryFileByTag.
func MakeEndpointOfGetRepositoryFileByTag(s Static) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetRepositoryFileByTagRequest)
		repositoryFile, err := s.GetRepositoryFileByTag(
			ctx,
			req.Repository,
			req.Tag,
		)
		return &GetRepositoryFileByTagResponse{
			RepositoryFile: repositoryFile,
			Err:            err,
		}, nil
	}
}

type ListRepositoryFilesRequest struct {
	Repository string `json:"repository"`
	Page       *Page  `json:"page"`
}

// ValidateListRepositoryFilesRequest creates a validator for ListRepositoryFilesRequest.
func ValidateListRepositoryFilesRequest(newSchema func(*ListRepositoryFilesRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ListRepositoryFilesRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ListRepositoryFilesResponse struct {
	RepositoryFiles []*RepositoryFile `json:"repository_files"`
	Err             error             `json:"-"`
}

func (r *ListRepositoryFilesResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *ListRepositoryFilesResponse) Failed() error { return r.Err }

// MakeEndpointOfListRepositoryFiles creates the endpoint for s.ListRepositoryFiles.
func MakeEndpointOfListRepositoryFiles(s Static) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ListRepositoryFilesRequest)
		repositoryFiles, err := s.ListRepositoryFiles(
			ctx,
			req.Repository,
			req.Page,
		)
		return &ListRepositoryFilesResponse{
			RepositoryFiles: repositoryFiles,
			Err:             err,
		}, nil
	}
}

type ListRepositoryLogsRequest struct {
	Repository string `json:"repository"`
	Page       *Page  `json:"page"`
}

// ValidateListRepositoryLogsRequest creates a validator for ListRepositoryLogsRequest.
func ValidateListRepositoryLogsRequest(newSchema func(*ListRepositoryLogsRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ListRepositoryLogsRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ListRepositoryLogsResponse struct {
	Logs []RepositoryLog `json:"logs"`
	Err  error           `json:"-"`
}

func (r *ListRepositoryLogsResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *ListRepositoryLogsResponse) Failed() error { return r.Err }

// MakeEndpointOfListRepositoryLogs creates the endpoint for s.ListRepositoryLogs.
func MakeEndpointOfListRepositoryLogs(s Static) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ListRepositoryLogsRequest)
		logs, err := s.ListRepositoryLogs(
			ctx,
			req.Repository,
			req.Page,
		)
		return &ListRepositoryLogsResponse{
			Logs: logs,
			Err:  err,
		}, nil
	}
}

type RemoveRepositoryFileRequest struct {
	Repository string `json:"repository"`
	Tag        string `json:"tag"`
}

// ValidateRemoveRepositoryFileRequest creates a validator for RemoveRepositoryFileRequest.
func ValidateRemoveRepositoryFileRequest(newSchema func(*RemoveRepositoryFileRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*RemoveRepositoryFileRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type RemoveRepositoryFileResponse struct {
	Err error `json:"-"`
}

func (r *RemoveRepositoryFileResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *RemoveRepositoryFileResponse) Failed() error { return r.Err }

// MakeEndpointOfRemoveRepositoryFile creates the endpoint for s.RemoveRepositoryFile.
func MakeEndpointOfRemoveRepositoryFile(s Static) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*RemoveRepositoryFileRequest)
		err := s.RemoveRepositoryFile(
			ctx,
			req.Repository,
			req.Tag,
		)
		return &RemoveRepositoryFileResponse{
			Err: err,
		}, nil
	}
}
