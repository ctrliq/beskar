// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package apiv1

import (
	"reflect"

	"github.com/RussellLuo/kun/pkg/oas2"
)

var (
	base = `swagger: "2.0"
info:
  title: "Static file Repository Management API"
  version: "1.0.0"
  description: "Static is used for managing static file repositories.\nThis is the API documentation of Static.\n//"
  license:
    name: "MIT"
host: "example.com"
basePath: "/artifacts/static/api/v1"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
`

	paths = `
paths:
  /repository:
    delete:
      description: "Delete a static repository."
      operationId: "DeleteRepository"
      tags:
        - static
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/DeleteRepositoryRequestBody"
      %s
  /repository/file:byname:
    get:
      description: "Get file information by name from static repository."
      operationId: "GetRepositoryFileByName"
      tags:
        - static
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/GetRepositoryFileByNameRequestBody"
      %s
  /repository/file:bytag:
    get:
      description: "Get file information by tag from static repository."
      operationId: "GetRepositoryFileByTag"
      tags:
        - static
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/GetRepositoryFileByTagRequestBody"
      %s
  /repository/file:list:
    get:
      description: "List files for a static repository."
      operationId: "ListRepositoryFiles"
      tags:
        - static
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/ListRepositoryFilesRequestBody"
      %s
  /repository/logs:
    get:
      description: "List static repository logs."
      operationId: "ListRepositoryLogs"
      tags:
        - static
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/ListRepositoryLogsRequestBody"
      %s
  /repository/file:
    delete:
      description: "Remove file from static repository."
      operationId: "RemoveRepositoryFile"
      tags:
        - static
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/RemoveRepositoryFileRequestBody"
      %s
`
)

func getResponses(schema oas2.Schema) []oas2.OASResponses {
	return []oas2.OASResponses{
		oas2.GetOASResponses(schema, "DeleteRepository", 200, &DeleteRepositoryResponse{}),
		oas2.GetOASResponses(schema, "GetRepositoryFileByName", 200, &GetRepositoryFileByNameResponse{}),
		oas2.GetOASResponses(schema, "GetRepositoryFileByTag", 200, &GetRepositoryFileByTagResponse{}),
		oas2.GetOASResponses(schema, "ListRepositoryFiles", 200, &ListRepositoryFilesResponse{}),
		oas2.GetOASResponses(schema, "ListRepositoryLogs", 200, &ListRepositoryLogsResponse{}),
		oas2.GetOASResponses(schema, "RemoveRepositoryFile", 200, &RemoveRepositoryFileResponse{}),
	}
}

func getDefinitions(schema oas2.Schema) map[string]oas2.Definition {
	defs := make(map[string]oas2.Definition)

	oas2.AddDefinition(defs, "DeleteRepositoryRequestBody", reflect.ValueOf(&struct {
		Repository  string `json:"repository"`
		DeleteFiles bool   `json:"delete_files"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "DeleteRepository", 200, (&DeleteRepositoryResponse{}).Body())

	oas2.AddDefinition(defs, "GetRepositoryFileByNameRequestBody", reflect.ValueOf(&struct {
		Repository string `json:"repository"`
		Name       string `json:"name"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "GetRepositoryFileByName", 200, (&GetRepositoryFileByNameResponse{}).Body())

	oas2.AddDefinition(defs, "GetRepositoryFileByTagRequestBody", reflect.ValueOf(&struct {
		Repository string `json:"repository"`
		Tag        string `json:"tag"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "GetRepositoryFileByTag", 200, (&GetRepositoryFileByTagResponse{}).Body())

	oas2.AddDefinition(defs, "ListRepositoryFilesRequestBody", reflect.ValueOf(&struct {
		Repository string `json:"repository"`
		Page       *Page  `json:"page"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "ListRepositoryFiles", 200, (&ListRepositoryFilesResponse{}).Body())

	oas2.AddDefinition(defs, "ListRepositoryLogsRequestBody", reflect.ValueOf(&struct {
		Repository string `json:"repository"`
		Page       *Page  `json:"page"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "ListRepositoryLogs", 200, (&ListRepositoryLogsResponse{}).Body())

	oas2.AddDefinition(defs, "RemoveRepositoryFileRequestBody", reflect.ValueOf(&struct {
		Repository string `json:"repository"`
		Tag        string `json:"tag"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "RemoveRepositoryFile", 200, (&RemoveRepositoryFileResponse{}).Body())

	return defs
}

func OASv2APIDoc(schema oas2.Schema) string {
	resps := getResponses(schema)
	paths := oas2.GenPaths(resps, paths)

	defs := getDefinitions(schema)
	definitions := oas2.GenDefinitions(defs)

	return base + paths + definitions
}
